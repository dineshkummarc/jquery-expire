{"name":"jQuery-expire","body":"# expire\r\n\r\n## Description\r\nChecks to see whether a page has expired or not. Checks current timestamp on load and at a specified interval (default 1 second) against specified start and end times. Can use client's local time or pull from atomic clock.  Can use local timezone's for each client, or specified absolute timezone.\r\n\r\n## Usage\r\n1. Include jQuery\r\n2. Include jquery.expire.js\r\n3. Call `$.expire();` with `startTime`, `endTime`, and `expireAction`\r\n\r\n## Options\r\n**startTime**  \r\ndate  \r\nrequired  \r\nDate when you want the page to become active. If `timeStamp` is before `startTime`, `expireAction` will be called.\r\n\r\n**endTime**  \r\ndate  \r\nrequired  \r\nDate when you want the page to expire. If `timeStamp` is on or after `endTime`, `expireAction` will be called.\r\n\r\n**expireAction**  \r\nfunction  \r\nrequired  \r\nThis function is called when `timeStamp` is outside range of `startTime` and `endTime`. A common usage would be to redirect the page with `window.location`.\r\n\r\n**updateInterval**\r\ninteger  \r\noptional  \r\ndefault: `1000`  \r\nInterval, in milliseconds, the script will check whether the page is expired or not. The script will automatically check on page load, then every `updateInterval`.\r\n\r\n**useAtomicTime**  \r\nboolean  \r\noptional  \r\ndefault: `false`  \r\nIf true, the `timeStamp` will be updated via AJAX to the atomic time in the timezone specified with the `timeZone` option.\r\n\r\n**timeZone**  \r\nstring  \r\noptional  \r\ndefault: `'local'`  \r\nCan be any timezone listed on http://json-time.appspot.com/timezones.json.  If set to `'local'` (default), the timezone will be checked via AJAX based on the client's IP address geolocation information. Keep in mind that the page will expire for different clients depending on what timezone they are in. Setting an absolute timezone will expire the page for everyone at the same time globally.\r\n    \r\n## Known & Possible Bugs\r\n- `checkExpiration()` doesn't seem to see the update when the time is updated to atomic time via AJAX; probably because `setInterval` is called before the async action is completed.\r\n- Not all timezones pulled from IPInfoDB have been checked to proved whether they convert correctly with the `convertTZ()` function.","tagline":"Checks to see whether a page has expired and, if so, performs an action.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}